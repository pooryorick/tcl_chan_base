#! /usr/bin/tclsh

# Copyright	2017-2021	Poor Yorick 
#	ethereum 0x0b5049C148b00a216B29641ab16953b6060Ef8A6
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# A copy of the GNU Affero General Public License is available in the "LICENSE"
# file, and at <https://www.gnu.org/licenses/agpl-3.0.en.html>. 

source [file join [
	file dirname [file dirname [file dirname [
	    file normalize [info script]/...]]]]/devtools/testutilities.tcl]

testsNeedTcl     8.6
testsNeedTcltest 2.0

package require {chan base}
package require {chan getslimit}

package require tcl::chan::memchan 
package require tcl::chan::string 
namespace import ::tcllib::chan::getslimit

proc main {} {
    variable done
    set data1 abcdefghijklmnopqrstuvwxyz

    test getslimit-configure {} -body {
        set chan1 [::tcl::chan::string {}]
	[::tcllib::chan::getslimit new chan1] .init $chan1
	chan1 .init [::tcl::chan::memchan] -chan $chan1 -getslimit 33 
	chan1 configure -getslimit
    } -cleanup {
	rename chan1 {}
    } -result 33


    test getslimit-under {
    } -body {
	::tcllib::chan::getslimit new chan1
	chan1 .init [::tcl::chan::string $data1] -getslimit 1000
	chan1 gets
    } -cleanup {
	rename chan1 {}
    } -result $data1


    test getslimit-exceeded {
    } -body {
	::tcllib::chan::getslimit new chan1
	chan1 .init [::tcl::chan::string [
	    string repeat $data1 100]] -getslimit 10
	chan1 gets
    } -cleanup {
	rename chan1 {}
    } -result {abcdefghij}


    test getslimit-read {
	read is unaffacted by the limit
    } -body {
	::tcllib::chan::getslimit new chan1
	chan1 .init [::tcl::chan::string $data1]
	chan1 configure -getslimit 10
	lappend res [chan1 read 15]
	lappend res [chan1 read 3]
	lappend res [chan1 read 1]
	lappend res [chan1 read]
	lappend res [chan1 eof]
	lappend res [chan1 read]
	lappend res [chan1 eof]
    } -cleanup {
	rename chan1 {}
    } -result {abcdefghijklmno pqr s tuvwxyz 1 {} 1}

    testsuiteCleanup
    set done 1 
}

after 0 coroutine [info cmdcount]_main main  
vwait [namespace current]::done
